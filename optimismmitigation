pragma solidity 0.8.15;

import { Semver } from "../universal/Semver.sol";
import { FeeVault } from "../universal/FeeVault.sol";

/**

@custom:proxied

@custom:predeploy 0x4200000000000000000000000000000000000019

@title BaseFeeVault

@notice The BaseFeeVault accumulates the base fee that is paid by transactions.
/
contract BaseFeeVault is FeeVault, Semver {
/*

@custom:semver 1.1.0
@param _recipient Address that will receive the accumulated fees.
*/
constructor(address _recipient) FeeVault(_recipient, 10 ether) Semver(1, 1, 0) {
require(_recipient != address(0), "Invalid recipient address"); // Validate that the recipient address is not the zero address
require(_isContract(_recipient) == false, "Recipient address cannot be a contract"); // Validate that the recipient address is not a contract
}
/**

@dev Internal function to check if an address belongs to a contract
@param _address The address to check
@return A boolean indicating whether the address belongs to a contract
*/
function _isContract(address _address) internal view returns (bool) {
uint256 size;
assembly {
size := extcodesize(_address)
}
return size > 0;
}
}
